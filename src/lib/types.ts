import { MessagePlatform } from '@prisma/client';

/**
 * Read-only server state that is initialized on start and shared between all sessions.
 */
export type ServerState = {
	metadata: Metadata;
};

/**
 * Represents metadata about all conversations to simplify question generation. All ranges are
 * assumed to be inclusive.
 */
export type Metadata = {
	message: {
		distinctPlatforms: Array<MessagePlatform>;
		endDate: Date;
		endId: number;
		startDate: Date;
		startId: number;
	};
	participant: {
		distinctNames: Array<string>;
	};
	reaction: {
		distinctReactions: Array<string>;
		endId: number;
		startId: number;
	};
};

/**
 * All question variants supported by the game.
 */
export type QuestionVariant =
	| 'duration'
	// The player guesses the whether the conversation is fake or real.
	| 'fake'
	| 'platform'
	// The player guesses the reaction to the last message in the conversation.
	| 'react'
	// The player guesses the response to the last message in the conversation.
	| 'respond'
	// The player guesses when the last message in the conversation was sent.
	| 'when'
	| 'who';

/**
 * Represents a message in a conversation to be used in a question This is slightly different from
 * the representation in the database to allow simplified rendering.
 */
export type QuestionMessage = {
	content: string;
	date: Date;
	isMedia: boolean;
	participant: string;
	reaction: string;
};

/**
 * Represents a question that is asked to the player. This is generated by the server and rendered
 * by the client. All question variants share the same format, but may be rendered differently.
 */
export type Question = {
	answer: string;
	choices: Array<string>;
	messages: Array<QuestionMessage>;
	variant: QuestionVariant;
};
